// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings para `image_compressor.h`
class ImageCompressorBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageCompressorBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageCompressorBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Compress an image file located at `path` into a JPEG Base64 string.
  ///
  /// @param path       File path to the image.
  /// @param quality    JPEG quality (1-100).
  /// @param max_size   Maximum width or height for resizing. Use 0 for no resize.
  /// @return           Pointer to a null-terminated Base64 string allocated with malloc.
  /// Must be freed by calling `free_compressed_image`.
  /// Returns nullptr on failure.
  ffi.Pointer<ffi.Char> compress_image(
    ffi.Pointer<ffi.Char> path,
    int quality,
    int max_size,
  ) {
    return _compress_image(path, quality, max_size);
  }

  late final _compress_imagePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Int,
          )
        >
      >('compress_image');
  late final _compress_image = _compress_imagePtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)
      >();

  /// Frees the pointer returned by `compress_image`.
  void free_compressed_image(ffi.Pointer<ffi.Char> ptr) {
    return _free_compressed_image(ptr);
  }

  late final _free_compressed_imagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
        'free_compressed_image',
      );
  late final _free_compressed_image = _free_compressed_imagePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
